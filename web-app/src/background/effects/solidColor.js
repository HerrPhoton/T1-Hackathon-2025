import { BackgroundEffect } from './base';
import textData from '../../assets/examples/example.json';

// –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç privacyLevel –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
function parseEmployeeData(data, privacyLevel = 'medium') {
  const employee = data.employee;

  // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
  const result = {
    full_name: employee.full_name,
    position: employee.position,
    company: employee.company,
    privacy_level: privacyLevel
  };

  // –î–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
  switch (privacyLevel) {
    case 'high':
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
      return {
        full_name: employee.full_name,
        position: employee.position,
        privacy_level: privacyLevel
      };

    case 'medium':
      // –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
      return {
        ...result,
        department: employee.department,
        office_location: employee.office_location,
        contact: {
          email: employee.contact.email
        }
      };

    case 'low':
      // –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      return {
        ...result,
        department: employee.department,
        office_location: employee.office_location,
        contact: {
          email: employee.contact.email,
          telegram: employee.contact.telegram
        },
        branding: {
          logo_url: employee.branding.logo_url,
          corporate_colors: employee.branding.corporate_colors,
          slogan: employee.branding.slogan
        }
      };

    default:
      return {
        ...result,
        department: employee.department,
        office_location: employee.office_location,
        contact: {
          email: employee.contact.email
        }
      };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
function calculateBaseFontSize(frameWidth, frameHeight) {
  // –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (1920x1080)
  const baseWidth = 1920;
  const baseHeight = 1080;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞, —á—Ç–æ–±—ã —à—Ä–∏—Ñ—Ç –±—ã–ª —á–∏—Ç–∞–µ–º—ã–º –Ω–∞ –ª—é–±–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
  const minDimension = Math.min(frameWidth, frameHeight);
  const baseMinDimension = Math.min(baseWidth, baseHeight);

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (0.5-2.0)
  const scaleFactor = minDimension / baseMinDimension;

  // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è 1080p
  const baseFontSize = 24;

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
  return Math.max(12, Math.min(48, baseFontSize * scaleFactor));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —à—Ä–∏—Ñ—Ç–∞
function employeeDataToTextWithFontSizes(employeeData, frameWidth, frameHeight) {
  const privacyLevel = employeeData.privacy_level;
  const baseFontSize = calculateBaseFontSize(frameWidth, frameHeight);

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç–∞
  const nameMultiplier = 1.8;      // –ò–º—è - —Å–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π
  const positionMultiplier = 1.6;  // –î–æ–ª–∂–Ω–æ—Å—Ç—å - –∫—Ä—É–ø–Ω—ã–π
  const companyMultiplier = 1.0;   // –ö–æ–º–ø–∞–Ω–∏—è - —Å—Ä–µ–¥–Ω–∏–π
  const contactMultiplier = 0.9;   // –ö–æ–Ω—Ç–∞–∫—Ç—ã - –º–µ–ª–∫–∏–π
  const sloganMultiplier = 0.8;    // –°–ª–æ–≥–∞–Ω - —Å–∞–º—ã–π –º–µ–ª–∫–∏–π

  switch (privacyLevel) {
    case 'high':
      return [
        {
          text: employeeData.full_name,
          fontSize: Math.round(baseFontSize * nameMultiplier),
          spacingAfter: 0
        },
        {
          text: employeeData.position,
          fontSize: Math.round(baseFontSize * positionMultiplier),
          spacingAfter: 0
        }
      ];

    case 'medium':
      return [
        {
          text: employeeData.full_name,
          fontSize: Math.round(baseFontSize * nameMultiplier),
          spacingAfter: 0
        },
        {
          text: employeeData.position,
          fontSize: Math.round(baseFontSize * positionMultiplier),
          spacingAfter: Math.round(baseFontSize * 0.8)
        },
        {
          text: employeeData.company,
          fontSize: Math.round(baseFontSize * companyMultiplier),
          spacingAfter: 0
        },
        {
          text: employeeData.department,
          fontSize: Math.round(baseFontSize * companyMultiplier),
          spacingAfter: 0
        },
        {
          text: employeeData.office_location,
          fontSize: Math.round(baseFontSize * companyMultiplier),
          spacingAfter: Math.round(baseFontSize * 0.6)
        },
      ];

    case 'low':
      return [
        {
          text: employeeData.full_name,
          fontSize: Math.round(baseFontSize * nameMultiplier),
          spacingAfter: 0
        },
        {
          text: employeeData.position,
          fontSize: Math.round(baseFontSize * positionMultiplier),
          spacingAfter: Math.round(baseFontSize * 0.8)
        },
        {
          text: employeeData.company,
          fontSize: Math.round(baseFontSize * companyMultiplier),
          spacingAfter: 0
        },
        {
          text: employeeData.department,
          fontSize: Math.round(baseFontSize * companyMultiplier),
          spacingAfter: 0
        },
        {
          text: employeeData.office_location,
          fontSize: Math.round(baseFontSize * companyMultiplier),
          spacingAfter: Math.round(baseFontSize * 0.6)
        },
        {
          text: `Email: ${employeeData.contact.email}`,
          fontSize: Math.round(baseFontSize * contactMultiplier),
          spacingAfter: 0
        },
        {
          text: `Telegram: ${employeeData.contact.telegram}`,
          fontSize: Math.round(baseFontSize * contactMultiplier),
          spacingAfter: Math.round(baseFontSize * 0.4)
        },
        {
          text: employeeData.branding.slogan,
          fontSize: Math.round(baseFontSize * sloganMultiplier),
          spacingAfter: 0
        }
      ];

    default:
      return [
        {
          text: employeeData.full_name,
          fontSize: Math.round(baseFontSize * 1.2),
          spacingAfter: 0
        },
        {
          text: employeeData.position,
          fontSize: Math.round(baseFontSize * 1.2),
          spacingAfter: Math.round(baseFontSize * 0.4)
        },
        {
          text: employeeData.company,
          fontSize: Math.round(baseFontSize * 1.0),
          spacingAfter: 0
        },
        {
          text: employeeData.department,
          fontSize: Math.round(baseFontSize * 1.0),
          spacingAfter: 0
        },
        {
          text: employeeData.office_location,
          fontSize: Math.round(baseFontSize * 1.0),
          spacingAfter: 0
        },
      ];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–∞
function getTextSettings(privacyLevel, frameWidth, frameHeight) {
  const baseFontSize = calculateBaseFontSize(frameWidth, frameHeight);

  switch (privacyLevel) {
    case 'high':
      return {
        lineHeight: Math.round(baseFontSize * 1.8),
        startY: Math.round(baseFontSize * 0.8),
        strokeWidth: Math.max(1, Math.round(baseFontSize * 0.1))
      };

    case 'medium':
      return {
        lineHeight: Math.round(baseFontSize * 1.4),
        startY: Math.round(baseFontSize * 1.2),
        strokeWidth: Math.max(1, Math.round(baseFontSize * 0.1))
      };

    case 'low':
      return {
        lineHeight: Math.round(baseFontSize * 1.3),
        startY: Math.round(baseFontSize * 0.8),
        strokeWidth: Math.max(1, Math.round(baseFontSize * 0.08))
      };

    default:
      return {
        lineHeight: Math.round(baseFontSize * 1.5),
        startY: Math.round(baseFontSize * 1.2),
        strokeWidth: Math.max(1, Math.round(baseFontSize * 0.1))
      };
  }
}

export class SolidColorBackground extends BackgroundEffect {

  constructor(color = '#1e1e1e', privacyLevel = 'medium') {
    super();
    this.color = color;
    this.privacyLevel = privacyLevel; // –°–æ—Ö—Ä–∞–Ω—è–µ–º privacyLevel
  }

  makeBackgroundTo(frameWidth, frameHeight) {
    const c = document.createElement('canvas');
    c.width = frameWidth;
    c.height = frameHeight;

    const ctx = c.getContext('2d');

    console.log(`üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ–Ω–∞: ${frameWidth}x${frameHeight}, –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: ${calculateBaseFontSize(frameWidth, frameHeight)}px`);

    // --- –°–ù–ê–ß–ê–õ–ê —Ä–∏—Å—É–µ–º —Ñ–æ–Ω ---
    ctx.fillStyle = this.color;
    ctx.fillRect(0, 0, frameWidth, frameHeight);

    // --- –ü–û–¢–û–ú —Ä–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ü–û–í–ï–†–• —Ñ–æ–Ω–∞ ---
    const employeeData = parseEmployeeData(textData, this.privacyLevel);
    const textLines = employeeDataToTextWithFontSizes(employeeData, frameWidth, frameHeight);
    const textSettings = getTextSettings(this.privacyLevel, frameWidth, frameHeight);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
    ctx.textAlign = 'left';
    ctx.textBaseline = 'top';
    ctx.fillStyle = 'white';
    ctx.strokeStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.lineWidth = textSettings.strokeWidth;

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const startX = Math.round(frameWidth * 0.02); // 2% –æ—Ç —à–∏—Ä–∏–Ω—ã
    let currentY = textSettings.startY;

    textLines.forEach((lineObj, index) => {
      ctx.font = `bold ${lineObj.fontSize}px 'Segoe UI', Arial, sans-serif`;

      // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
      ctx.strokeText(lineObj.text, startX, currentY);
      // –ó–∞—Ç–µ–º —Ä–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
      ctx.fillText(lineObj.text, startX, currentY);

      console.log(`üìù –°—Ç—Ä–æ–∫–∞ ${index + 1}: "${lineObj.text}" - —Ä–∞–∑–º–µ—Ä: ${lineObj.fontSize}px`);

      currentY += textSettings.lineHeight;

      if (lineObj.spacingAfter > 0) {
        currentY += lineObj.spacingAfter;
      }
    });

    return c;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export function getFontSizeInfo(frameWidth, frameHeight) {
  const baseFontSize = calculateBaseFontSize(frameWidth, frameHeight);
  return {
    frameWidth,
    frameHeight,
    baseFontSize,
    calculatedSizes: {
      name: Math.round(baseFontSize * 1.8),
      position: Math.round(baseFontSize * 1.6),
      company: Math.round(baseFontSize * 1.0),
      contact: Math.round(baseFontSize * 0.9),
      slogan: Math.round(baseFontSize * 0.8)
    }
  };
}

export default SolidColorBackground;
